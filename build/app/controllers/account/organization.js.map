{"version":3,"sources":["../../../../server/app/controllers/account/organization.js"],"names":["mongoose","require","_","Organization","mongooseObject","Types","ObjectId","exports","getAll","req","res","find","organizations","json","items","getSingle","next","organizationId","params","organization_id","findOne","_id","exec","err","organization","title","createOrganization","userOpenId","user","name","body","users","Owners","push","save","status","item","getAllMemberOrganization","isValid","Error","populate","result","members","Members","delMemberOrganization","userId","user_id","update","$pull","createMemberOrganization","checkMember","isEmpty","$push"],"mappings":"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","file":"organization.js","sourcesContent":["import { getUserFromIdentity } from '../space/index';\nimport { getIdentityFromToken } from '../../utils/jwtUtils';\n\nconst mongoose = require('mongoose');\n\nconst _ = require('lodash');\nconst Organization = require('../../models/Organization');\n\nconst mongooseObject = mongoose.Types.ObjectId;\n\nexports.getAll = async (req, res) => {\n  const organizations = await Organization.find({ });\n\n  res.json({\n    items: organizations,\n  });\n};\n\nexports.getSingle = async (req, res, next) => {\n  const organizationId = req.params.organization_id;\n  Organization.findOne({ _id: organizationId }).exec((err, organization) => {\n    if (err) next(err);\n    res.json({\n      title: 'find organization',\n      organization,\n    });\n  });\n};\n\nexports.createOrganization = async (req, res, next) => {\n  try {\n    const userOpenId = getIdentityFromToken(req);\n    const user = await getUserFromIdentity(userOpenId);\n\n    // console.log(\"user:: \", user);\n\n    const organization = new Organization();\n    organization.name = req.body.name;\n\n    organization.users.Owners = [user._id];\n\n    // console.log(\"organization:: \", organization);\n\n    user.organizations.push(organization._id);  // Add organizations to User\n\n    await organization.save();\n    await user.save();\n\n    res.json({\n      status: 'success',\n      item: organization,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.getAllMemberOrganization = async (req, res, next) => {\n  const organizationId = req.params.organization_id;\n\n  try {\n    if (!mongooseObject.isValid(organizationId)) {\n      throw new Error('Not objectId');\n    }\n\n    const result = await Organization.find({ _id: organizationId }).populate('users.Members');\n\n    res.json({\n      organization: organizationId,\n      members: result[0].users.Members,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.delMemberOrganization = async (req, res, next) => {\n  try {\n    const organizationId = req.params.organization_id;\n    const userId = req.params.user_id;\n\n    await Organization.update({\n      _id: organizationId },\n      {\n        $pull: {\n          'users.Members': userId,\n        },\n      },\n    );\n\n    res.json({\n      status: 'SUCCESS',\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.createMemberOrganization = async (req, res, next) => {\n  try {\n    const userId = req.body.user_id;\n    const organizationId = req.params.organization_id;\n\n    // const organization = await Organization.find({ _id: organizationId });\n    // console.log(\"find organization:: \", organization);\n    // organization[0].users.Members.push(userId);\n\n    // const organization = new Organization();\n    // organization.update( { \"_id\": organizationId },\n    // { \"users.Members\": userId },\n    // { upsert: true } )\n\n    // const organization = await Organization.findOne({ _id: organizationId });\n    // organization.users.Members.push(userId);\n    //\n    // const result = await organization.save();\n\n    const checkMember = await Organization.find({ 'users.Members': userId });\n\n    if (!_.isEmpty(checkMember)) {\n      // console.log(\"IF\");\n      res.json({\n        status: 'มีแล้ว ไม่แอดแล้ว',\n      });\n    } else {\n      // console.log(\"ELSE\");\n      await Organization.update({\n        _id: organizationId,\n      }, {\n        $push: {\n          'users.Members': userId,\n        },\n      });\n\n      res.json({\n        status: 'SUCCESS',\n      });\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n"]}