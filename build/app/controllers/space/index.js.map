{"version":3,"sources":["../../../../server/app/controllers/space/index.js"],"names":["Space","require","User","Organization","getUserFromIdentity","identity","findByIdentity","user","newUser","email","split","provider","providerId","identities","user_id","connection","isSocial","save","getOrganizationsFromUser","_id","organizations","isEmpty","newOrganization","name","users","Owners","push","exports","getAll","req","res","next","userOpenId","find","$or","userOrgazation","organization","$in","map","result","json","items","getSingle","spaceId","params","space_id","findOne","space","title","status","message","sys","type","id","updateSpace","body","defaultLocale","findOneAndUpdate","new","detail","createSpace","spaceName","organizationToUse","spaces","deleteSpace","err","remove"],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport { getIdentityFromToken } from '../../utils/jwtUtils';\n\nconst Space = require('../../models/Space');\nconst User = require('../../models/User');\nconst Organization = require('../../models/Organization');\n\n/**\n * Get\n */\n/* eslint-disable import/prefer-default-export */\nexport const getUserFromIdentity = async (identity) => {\n  try {\n    const user = await User.findByIdentity(identity);\n    if (user) return user;\n\n    // Else create new one\n    const newUser = new User();\n    newUser.email = '';\n    const [provider, providerId] = _.split(identity, '|');\n    newUser.identities = [\n      {\n        provider,\n        user_id: providerId,\n        connection: provider,\n        isSocial: true,\n      },\n    ];\n    await newUser.save();\n    return newUser;\n  } catch (e) {\n    return e;\n  }\n};\n/* eslint-enable import/prefer-default-export */\n\nconst getOrganizationsFromUser = async (user) => {\n  try {\n    const organizations = await Organization.findByIdentity(user._id);\n    if (!_.isEmpty(organizations)) return organizations;\n\n    // Else create new one\n    const newOrganization = new Organization();\n    newOrganization.name = 'Default';\n    newOrganization.users.Owners = [user._id];\n\n    user.organizations.push(newOrganization._id);\n    await user.save();\n    await newOrganization.save();\n    return [newOrganization];\n  } catch (e) {\n    return e;\n  }\n};\n\nexports.getAll = async (req, res, next) => {\n  const userOpenId = getIdentityFromToken(req);\n  const user = await getUserFromIdentity(userOpenId);\n\n  try {\n    const userOrgazation = await Organization.find({\n      $or: [{ 'users.Members': user._id }, { 'users.Owners': user._id }],\n    });\n\n    const result = await Space.find({\n      organization: { $in: _.map(userOrgazation, '_id') },\n    });\n\n    res.json({\n      items: result,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.getSingle = async (req, res) => {\n  const spaceId = req.params.space_id;\n\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    if (space !== null) {\n      res.json({\n        title: 'find space',\n        space,\n      });\n    }\n  } catch (e) {\n    res.status(404).json({\n      message: 'The resource could not be found.',\n      sys: {\n        type: 'Error',\n        id: 'NotFound',\n      },\n    });\n  }\n};\n\nexports.updateSpace = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const name = req.body.name;\n  const defaultLocale = req.body.defaultLocale;\n\n  try {\n    const space = await Space.findOneAndUpdate({\n      // condition\n      _id: spaceId,\n    }, {\n      // Doc\n      name,\n      defaultLocale,\n    }, {\n      new: true,\n    });\n    res.json({\n      status: 'SUCCESS',\n      detail: 'Update space successfully',\n      space,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.createSpace = async (req, res) => {\n  const spaceName = req.body.name;\n  const defaultLocale = req.body.defaultLocale;\n\n  const userOpenId = getIdentityFromToken(req);\n  const user = await getUserFromIdentity(userOpenId);\n  const organizations = await getOrganizationsFromUser(user);\n\n  const organizationToUse = organizations[0];\n\n  const space = new Space({\n    name: spaceName,\n    defaultLocale,\n    users: [user._id],\n    organization: organizationToUse._id,\n  });\n\n  organizationToUse.spaces.push(space._id);\n\n  await space.save();\n  await organizationToUse.save();\n\n  res.json({\n    status: 'SUCCESS',\n    detail: 'Create space successfully',\n    space,\n    user,\n    organization: organizationToUse,\n  });\n};\n\nexports.deleteSpace = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) next(err);\n\n    if (!space) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        message: 'Cannot find space',\n      });\n    } else {\n      space.remove();\n      res.json({\n        status: 'SUCCESSFUL',\n        message: 'Delete successfully',\n      });\n    }\n  });\n};\n"]}