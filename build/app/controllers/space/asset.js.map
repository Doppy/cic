{"version":3,"sources":["../../../../server/app/controllers/space/asset.js"],"names":["mongoose","require","_","Asset","Space","_helper","exports","getAllAssets","req","res","next","spaceId","params","space_id","findOne","_id","populate","exec","err","space","json","items","assets","getSingleAsset","assetId","asset_id","asset","item","updateAsset","fields","body","findOneAndUpdate","_spaceId","new","upsert","uniq","save","status","detail","createAsset","Types","ObjectId","deleteAsset","remove","filter","equals","truncateAsset","clear","errSave","handleError","err2"],"mappings":"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","file":"asset.js","sourcesContent":["const mongoose = require('mongoose');\nconst _ = require('lodash');\n\nconst Asset = require('../../models/Asset');\nconst Space = require('../../models/Space');\n\nconst _helper = require('./helper');\n\n/**\n * Assets\n */\nexports.getAllAssets = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }).populate('assets').exec((err, space) => {\n    if (err) next(err);\n    res.json({\n      items: space.assets,\n    });\n  });\n};\n\nexports.getSingleAsset = (req, res, next) => {\n  const assetId = req.params.asset_id;\n  Asset.findOne({ _id: assetId }, (err, asset) => {\n    if (err) next(err);\n    res.json({\n      item: asset,\n    });\n  });\n};\n\n// UPDATE ASSET\nconst updateAsset = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const assetId = req.params.asset_id;\n  const fields = req.body.fields;\n\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    const asset = await Asset.findOneAndUpdate({ _id: assetId }, {\n      fields,\n      _spaceId: spaceId,\n    }, {\n      new: true,\n      upsert: true,\n    });\n\n    // Add to space.entires if not exists\n    space.assets = _.uniq([...space.assets, asset._id]);\n    await space.save();\n\n    res.json({\n      status: 'SUCCESS',\n      detail: 'Create new asset successfully',\n      asset,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.updateAsset = updateAsset;\n\n// CREATE CONTENT TYPE\nexports.createAsset = (req, res, next) => {\n  // Create new objectId\n  const assetId = mongoose.Types.ObjectId();\n  req.params.asset_id = assetId;\n  return updateAsset(req, res, next);\n};\n\nexports.deleteAsset = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const assetId = req.params.asset_id;\n\n  try {\n    await Asset.remove({ _id: assetId });\n    const space = await Space.findOne({ _id: spaceId });\n    space.assets = _.filter(space.assets, _id => !_id.equals(assetId));\n    await space.save();\n\n    res.json({\n      status: 'SUCCESS',\n      detail: 'delete asset successfully',\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.truncateAsset = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) next(err);\n    space.assets.clear();\n    space.save((errSave) => {\n      if (errSave) _helper.handleError(errSave, next);\n\n      Asset.remove({ _spaceId: spaceId }, (err2) => {\n        if (err2) _helper.handleError(err2, next);\n        res.json({\n          status: 'SUCCESS',\n          detail: 'clear all assets in space successfully',\n          space,\n        });\n      });\n    });\n  });\n};\n"]}