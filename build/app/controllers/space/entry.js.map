{"version":3,"sources":["../../../../server/app/controllers/space/entry.js"],"names":["mongoose","require","mongooseObject","Types","ObjectId","_","Entry","Space","_helper","checkObjectId","data","isValid","error","keyData","getQuery","q","queryString","isObjectId","_q","key","keyQuery","__key","tempVal","split","$eq","indexOf","tempIndex","getEntry","query","spaceId","entryId","reqQuery","select","skip","limit","parseInt","_getQuery","_query","_spaceId","find","exports","getAllEntries","req","res","next","params","space_id","result","json","items","status","getSingleEntry","entry_id","item","length","updateEntry","contentTypeId","headers","fields","body","console","log","findOne","_id","err","space","contentTypeInfo","contentTypes","ct","equals","detail","isExistingInSpace","entries","entry","validation","validateFields","valid","message","save","err1","handleError","newEntry","push","err2","createEntry","deleteEntry","remove","filter","truncateEntry"],"mappings":"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","file":"entry.js","sourcesContent":["const mongoose = require('mongoose');\nconst mongooseObject = mongoose.Types.ObjectId;\nconst _ = require('lodash');\n\nconst Entry = require('../../models/Entry');\nconst Space = require('../../models/Space');\nconst _helper = require('./helper');\n\n/**\n * Entries\n */\n\nconst checkObjectId = (data) => {\n    if (typeof (data) !== 'object') {\n        if (!mongooseObject.isValid(data))\n            throw {error: 'Not objectID!!'};\n    } else {\n        for (let keyData in data) {\n            if (!mongooseObject.isValid(data[keyData]))\n                throw {error: 'Not objectID!!'};\n        }\n    }\n    return true;\n}\n\nconst getQuery = (q) => {\n    const queryString = {\n        \"content_type\": \"contentTypeId\",\n        'eq': '$eq',\n        'ne': '$ne',\n        'gt': '$gt',\n        'gte': '$gte',\n        'lt': '$lt',\n        'lte': '$lte',\n        'in': '$in',\n        'nin': '$nin'\n    };\n    const isObjectId = [\n        \"_id\", \"contentTypeId\", \"_spaceId\"\n    ];\n\n\n    const _q = {};\n    for (let key in q) {\n        const keyQuery = queryString[key] ? queryString[key] : key;\n        if (typeof (q[key]) === 'object') {\n            for (let __key in q[key]) {\n                if (queryString[__key]) {\n                    if (typeof (_q[keyQuery]) !== 'object') {\n                        _q[keyQuery] = {};\n                    }\n                    const tempVal = (__key === 'in' || __key === 'nin') ? q[key][__key].split(',') : q[key][__key];\n                    _q[keyQuery][queryString[__key]] = tempVal;\n                }\n            }\n        } else {\n            _q[keyQuery] = {\n                $eq: q[key]\n            };\n        }\n        if (isObjectId.indexOf(keyQuery) >= 0) {\n            for (let tempIndex in _q[keyQuery]) {\n                checkObjectId(_q[keyQuery][tempIndex]);\n            }\n        }\n    }\n\n    return _q;\n}\n\nconst getEntry = async (query, spaceId, entryId = null) => {\n    const reqQuery = {...query};\n    let select = \"\", skip = 0, limit = 0;\n    if (reqQuery.select) {\n        select = reqQuery.select;\n        delete reqQuery.select;\n    }\n    if (reqQuery.skip) {\n        skip = parseInt(reqQuery.skip);\n        delete reqQuery.skip;\n    }\n    if (reqQuery.limit) {\n        limit = parseInt(reqQuery.limit);\n        delete reqQuery.limit;\n    }\n\n    const _getQuery = getQuery(reqQuery);\n\n    checkObjectId(spaceId);\n\n    const _query = {\n        ..._getQuery,\n        _spaceId: {$eq: spaceId}\n    };\n    if (entryId !== null) {\n        checkObjectId(entryId);\n        _query[\"_id\"] = {$eq: entryId};\n    }\n//        console.log(_query);\n\n    return await Entry.find(_query).select(select).limit(limit).skip(skip);\n\n}\n\n\nexports.getAllEntries = async(req, res, next) => {\n    try {\n        const spaceId = req.params.space_id;\n        const reqQuery = req.query;\n        const result = await getEntry(reqQuery, spaceId);\n        res.json({\n            items: result,\n        });\n    } catch (e) {\n        res.status(500).json(e);\n    }\n};\n\nexports.getSingleEntry = async(req, res, next) => {\n    try {\n        const spaceId = req.params.space_id;\n        const entryId = req.params.entry_id;\n        const reqQuery = req.query;\n        const result = await getEntry(reqQuery, spaceId, entryId);\n        res.json({\n            item: (result.length > 0) ? result[0] : [],\n        });\n    } catch (e) {\n        res.status(500).json(e);\n    }\n}\n\n// UPDATE CONTENT TYPE\nconst updateEntry = (req, res, next) => {\n\n    const spaceId = req.params.space_id;\n    const entryId = req.params.entry_id;\n    const contentTypeId = req.headers['x-cic-content-type'];\n    const fields = req.body.fields;\n    const status = req.body.status;\n    console.log('updateEntry', fields);\n\n    Space.findOne({_id: spaceId}, (err, space) => {\n        if (err) {\n            return next(err);\n        }\n\n        // Check contentType\n        const contentTypeInfo = _.find(space.contentTypes, ct => ct._id.equals(contentTypeId));\n\n        if (!contentTypeInfo) {\n            res.json({\n                status: 'UNSUCCESSFUL',\n                detail: `Invalid contentType ${contentTypeId}`,\n            });\n            return;\n        }\n\n        const isExistingInSpace = _.find(space.entries, entry => entry.equals(entryId));\n        if (isExistingInSpace) {\n\n            const validation = _helper.validateFields(fields, contentTypeInfo);\n            if (!validation.valid) {\n                res.json({\n                    status: 'UNSUCCESSFUL',\n                    message: validation.message,\n                });\n                return;\n            }\n\n            // Not update spaces.entry\n            // Update entry\n            Entry.findOne({_id: entryId}, (err, entry) => {\n                entry.fields = fields;\n                entry.status = status;\n                entry.save((err1) => {\n                    if (err1)\n                        return _helper.handleError(err1, next);\n                    res.json({\n                        status: 'SUCCESS',\n                        detail: 'Updating entry successfully',\n                        entry,\n                    });\n                });\n            });\n        } else {\n            // 1. Create and Insert new entry\n            // 2. Update spaces.entry\n            const newEntry = new Entry({\n                contentTypeId,\n                fields,\n                status: 'draft',\n                _spaceId: spaceId,\n            });\n\n            newEntry.save((err) => {\n                if (err)\n                    return _helper.handleError(err, next);\n\n                // Update space\n                space.entries.push(newEntry._id);\n                space.save((err2) => {\n                    if (err2) {\n                        return next(err2);\n                    }\n                    res.json({\n                        status: 'SUCCESS',\n                        detail: 'Create new entry successfully',\n                        entry: newEntry,\n                    });\n                });\n            });\n        }\n    });\n};\n\nexports.updateEntry = updateEntry;\n\n// CREATE CONTENT TYPE\nexports.createEntry = (req, res, next) => {\n    // Create new objectId\n    const entryId = mongoose.Types.ObjectId();\n    req.params.entry_id = entryId;\n    return updateEntry(req, res, next);\n};\n\nexports.deleteEntry = (req, res, next) => {\n    const spaceId = req.params.space_id;\n    const entryId = req.params.entry_id;\n    Entry.remove({_id: entryId}, (err) => {\n        if (err)\n            return _helper.handleError(err, next);\n\n        // Remove entry ref from space\n        Space.findOne({_id: spaceId}, (err, space) => {\n            if (err)\n                return _helper.handleError(err, next);\n            space.entries = _.filter(space.entries, _id => !_id.equals(entryId));\n\n            space.save((err2) => {\n                if (err2)\n                    return _helper.handleError(err2, next);\n                res.json({\n                    status: 'SUCCESS',\n                    detail: 'delete entry successfully',\n                });\n            });\n        });\n    });\n};\n\nexports.truncateEntry = (req, res, next) => {\n    const spaceId = req.params.space_id;\n    Space.findOne({_id: spaceId}, (err, space) => {\n        if (err) {\n            return next(err);\n        }\n        space.entries = [];\n        space.save((err) => {\n            if (err)\n                return _helper.handleError(err, next);\n\n            Entry.remove({_spaceId: spaceId}, (err2) => {\n                if (err2)\n                    return _helper.handleError(err2, next);\n                res.json({\n                    status: 'SUCCESS',\n                    detail: 'clear all entries in space successfully',\n                    space,\n                });\n            });\n        });\n    });\n};\n"]}