{"version":3,"sources":["../../../../server/app/controllers/space/entry.js"],"names":["mongoose","require","_","Entry","Space","helper","mongooseObject","Types","ObjectId","checkObjectId","data","isValid","Error","keyData","getQuery","q","queryString","content_type","eq","ne","gt","gte","lt","lte","in","nin","isObjectId","_q","key","keyQuery","__key","tempVal","split","$eq","indexOf","tempIndex","getEntry","query","spaceId","entryId","reqQuery","select","skip","limit","parseInt","_getQuery","_query","_spaceId","_id","find","result","exports","getAllEntries","req","res","params","space_id","json","items","status","getSingleEntry","entry_id","item","length","updateEntry","next","contentTypeId","headers","fields","body","findOne","space","contentTypeInfo","contentTypes","ct","equals","detail","validation","validateFields","valid","message","findOneAndUpdate","new","upsert","entry","entries","uniq","save","createEntry","deleteEntry","remove","filter","truncateEntry"],"mappings":";;;;;;;;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,IAAID,QAAQ,QAAR,CAAV;;AAEA,IAAME,QAAQF,QAAQ,oBAAR,CAAd;AACA,IAAMG,QAAQH,QAAQ,oBAAR,CAAd;AACA,IAAMI,SAASJ,QAAQ,UAAR,CAAf;;AAEA,IAAMK,iBAAiBN,SAASO,KAAT,CAAeC,QAAtC;;AAEA;;;AAGA;AACA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC9B,MAAI,QAAQA,IAAR,yCAAQA,IAAR,OAAkB,QAAtB,EAAgC;AAC9B,QAAI,CAACJ,eAAeK,OAAf,CAAuBD,IAAvB,CAAL,EAAmC,MAAM,IAAIE,KAAJ,CAAU,gBAAV,CAAN;AACpC,GAFD,MAEO;AACL,SAAK,IAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AAC1B,UAAI,CAACJ,eAAeK,OAAf,CAAuBD,KAAKG,OAAL,CAAvB,CAAL,EAA4C,MAAM,IAAID,KAAJ,CAAU,gBAAV,CAAN;AAC7C;AACF;AACD,SAAO,IAAP;AACD,CATD;;AAWA,IAAME,WAAW,SAAXA,QAAW,CAACC,CAAD,EAAO;AACtB,MAAMC,cAAc;AAClBC,kBAAc,eADI;AAElBC,QAAI,KAFc;AAGlBC,QAAI,KAHc;AAIlBC,QAAI,KAJc;AAKlBC,SAAK,MALa;AAMlBC,QAAI,KANc;AAOlBC,SAAK,MAPa;AAQlBC,QAAI,KARc;AASlBC,SAAK;AATa,GAApB;AAWA,MAAMC,aAAa,CAAC,KAAD,EAAQ,eAAR,EAAyB,UAAzB,CAAnB;;AAEA,MAAMC,KAAK,EAAX;AACA,OAAK,IAAMC,GAAX,IAAkBb,CAAlB,EAAqB;AACnB,QAAMc,WAAWb,YAAYY,GAAZ,IAAmBZ,YAAYY,GAAZ,CAAnB,GAAsCA,GAAvD;AACA,QAAI,QAAQb,EAAEa,GAAF,CAAR,MAAoB,QAAxB,EAAkC;AAChC,WAAK,IAAME,KAAX,IAAoBf,EAAEa,GAAF,CAApB,EAA4B;AAC1B,YAAIZ,YAAYc,KAAZ,CAAJ,EAAwB;AACtB,cAAI,QAAQH,GAAGE,QAAH,CAAR,MAA0B,QAA9B,EAAwC;AACtCF,eAAGE,QAAH,IAAe,EAAf;AACD;AACD,cAAME,UAAWD,UAAU,IAAV,IAAkBA,UAAU,KAA7B,GAAsCf,EAAEa,GAAF,EAAOE,KAAP,EAAcE,KAAd,CAAoB,GAApB,CAAtC,GAAiEjB,EAAEa,GAAF,EAAOE,KAAP,CAAjF;AACAH,aAAGE,QAAH,EAAab,YAAYc,KAAZ,CAAb,IAAmCC,OAAnC;AACD;AACF;AACF,KAVD,MAUO;AACLJ,SAAGE,QAAH,IAAe;AACbI,aAAKlB,EAAEa,GAAF;AADQ,OAAf;AAGD;AACD,QAAIF,WAAWQ,OAAX,CAAmBL,QAAnB,KAAgC,CAApC,EAAuC;AACrC,WAAK,IAAMM,SAAX,IAAwBR,GAAGE,QAAH,CAAxB,EAAsC;AACpCpB,sBAAckB,GAAGE,QAAH,EAAaM,SAAb,CAAd;AACD;AACF;AACF;;AAED,SAAOR,EAAP;AACD,CAxCD;;AA0CA,IAAMS;AAAA,uDAAW,iBAAOC,KAAP,EAAcC,OAAd;AAAA,QAAuBC,OAAvB,uEAAiC,IAAjC;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACTC,oBADS,gBACOH,KADP;AAEXI,kBAFW,GAEF,EAFE;AAGXC,gBAHW,GAGJ,CAHI;AAIXC,iBAJW,GAIH,CAJG;;;AAMf,gBAAIH,SAASC,MAAb,EAAqB;AACnBA,uBAASD,SAASC,MAAlB;AACA,qBAAOD,SAASC,MAAhB;AACD;AACD,gBAAID,SAASE,IAAb,EAAmB;AACjBA,qBAAOE,SAASJ,SAASE,IAAlB,EAAwB,EAAxB,CAAP;AACA,qBAAOF,SAASE,IAAhB;AACD;AACD,gBAAIF,SAASG,KAAb,EAAoB;AAClBA,sBAAQC,SAASJ,SAASG,KAAlB,EAAyB,EAAzB,CAAR;AACA,qBAAOH,SAASG,KAAhB;AACD;;AAEKE,qBAnBS,GAmBG/B,SAAS0B,QAAT,CAnBH;;;AAqBf/B,0BAAc6B,OAAd;;AAEMQ,kBAvBS,gBAwBVD,SAxBU;AAyBbE,wBAAU,EAAEd,KAAKK,OAAP;AAzBG;;AA2Bf,gBAAIC,YAAY,IAAhB,EAAsB;AACpB9B,4BAAc8B,OAAd;AACAO,qBAAOE,GAAP,GAAa,EAAEf,KAAKM,OAAP,EAAb;AACD;;AA9Bc;AAAA,mBAgCMpC,MAAM8C,IAAN,CAAWH,MAAX,EAAmBL,MAAnB,CAA0BA,MAA1B,EAAkCE,KAAlC,CAAwCA,KAAxC,EAA+CD,IAA/C,CAAoDA,IAApD,CAhCN;;AAAA;AAgCTQ,kBAhCS;AAAA,6CAiCRA,MAjCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;AAmCA;;AAEAC,QAAQC,aAAR;AAAA,wDAAwB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdhB,mBAFc,GAEJe,IAAIE,MAAJ,CAAWC,QAFP;AAGdhB,oBAHc,GAGHa,IAAIhB,KAHD;AAAA;AAAA,mBAICD,SAASI,QAAT,EAAmBF,OAAnB,CAJD;;AAAA;AAIdY,kBAJc;;AAKpBI,gBAAIG,IAAJ,CAAS;AACPC,qBAAOR;AADA,aAAT;AALoB;AAAA;;AAAA;AAAA;AAAA;;AASpBI,gBAAIK,MAAJ,CAAW,GAAX,EAAgBF,IAAhB;;AAToB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAaAN,QAAQS,cAAR;AAAA,wDAAyB,kBAAOP,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfhB,mBAFe,GAELe,IAAIE,MAAJ,CAAWC,QAFN;AAGfjB,mBAHe,GAGLc,IAAIE,MAAJ,CAAWM,QAHN;AAIfrB,oBAJe,GAIJa,IAAIhB,KAJA;AAAA;AAAA,mBAKAD,SAASI,QAAT,EAAmBF,OAAnB,EAA4BC,OAA5B,CALA;;AAAA;AAKfW,kBALe;;AAMrBI,gBAAIG,IAAJ,CAAS;AACPK,oBAAOZ,OAAOa,MAAP,GAAgB,CAAjB,GAAsBb,OAAO,CAAP,CAAtB,GAAkC;AADjC,aAAT;AANqB;AAAA;;AAAA;AAAA;AAAA;;AAUrBI,gBAAIK,MAAJ,CAAW,GAAX,EAAgBF,IAAhB;;AAVqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAAA;AAAA;AAAA;AAAA;;AAcA;AACA,IAAMO;AAAA,wDAAc,kBAAOX,GAAP,EAAYC,GAAZ,EAAiBW,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ3B,mBADY,GACFe,IAAIE,MAAJ,CAAWC,QADT;AAEZjB,mBAFY,GAEFc,IAAIE,MAAJ,CAAWM,QAFT;AAGZK,yBAHY,GAGIb,IAAIc,OAAJ,CAAY,oBAAZ,CAHJ;AAIZC,kBAJY,GAIHf,IAAIgB,IAAJ,CAASD,MAJN;AAKZT,kBALY,GAKHN,IAAIgB,IAAJ,CAASV,MALN;AAAA;AAAA;AAAA,mBAQIvD,MAAMkE,OAAN,CAAc,EAAEtB,KAAKV,OAAP,EAAd,CARJ;;AAAA;AAQViC,iBARU;AASVC,2BATU,GASQtE,EAAE+C,IAAF,CAAOsB,MAAME,YAAb,EAA2B;AAAA,qBAAMC,GAAG1B,GAAH,CAAO2B,MAAP,CAAcT,aAAd,CAAN;AAAA,aAA3B,CATR;;AAAA,gBAUXM,eAVW;AAAA;AAAA;AAAA;;AAWdlB,gBAAIG,IAAJ,CAAS;AACPE,sBAAQ,cADD;AAEPiB,+CAA+BV;AAFxB,aAAT;AAXc;;AAAA;AAkBVW,sBAlBU,GAkBGxE,OAAOyE,cAAP,CAAsBV,MAAtB,EAA8BI,eAA9B,CAlBH;;AAAA,gBAmBXK,WAAWE,KAnBA;AAAA;AAAA;AAAA;;AAoBdzB,gBAAIG,IAAJ,CAAS;AACPE,sBAAQ,cADD;AAEPqB,uBAASH,WAAWG;AAFb,aAAT;AApBc;;AAAA;AAAA;AAAA,mBA2BI7E,MAAM8E,gBAAN,CAAuB,EAAEjC,KAAKT,OAAP,EAAvB,EAAyC;AAC3D2B,0CAD2D;AAE3DE,4BAF2D;AAG3DT,sBAAQA,UAAU,OAHyC;AAI3DZ,wBAAUT;AAJiD,aAAzC,EAKjB;AACD4C,mBAAK,IADJ;AAEDC,sBAAQ;AAFP,aALiB,CA3BJ;;AAAA;AA2BVC,iBA3BU;;;AAqChB;AACAb,kBAAMc,OAAN,GAAgBnF,EAAEoF,IAAF,8BAAWf,MAAMc,OAAjB,IAA0BD,MAAMpC,GAAhC,GAAhB;AAtCgB;AAAA,mBAuCVuB,MAAMgB,IAAN,EAvCU;;AAAA;;AAyChBjC,gBAAIG,IAAJ,CAAS;AACPE,sBAAQ,SADD;AAEPiB,sBAAQ,+BAFD;AAGPQ;AAHO,aAAT;AAzCgB;AAAA;;AAAA;AAAA;AAAA;;AA+ChBnB;;AA/CgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAmDAd,QAAQa,WAAR,GAAsBA,WAAtB;;AAEA;AACAb,QAAQqC,WAAR,GAAsB,UAACnC,GAAD,EAAMC,GAAN,EAAWW,IAAX,EAAoB;AACxC;AACA,MAAM1B,UAAUvC,SAASO,KAAT,CAAeC,QAAf,EAAhB;AACA6C,MAAIE,MAAJ,CAAWM,QAAX,GAAsBtB,OAAtB;AACA,SAAOyB,YAAYX,GAAZ,EAAiBC,GAAjB,EAAsBW,IAAtB,CAAP;AACD,CALD;;AAOAd,QAAQsC,WAAR;AAAA,wDAAsB,kBAAOpC,GAAP,EAAYC,GAAZ,EAAiBW,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACd3B,mBADc,GACJe,IAAIE,MAAJ,CAAWC,QADP;AAEdjB,mBAFc,GAEJc,IAAIE,MAAJ,CAAWM,QAFP;AAAA;AAAA;AAAA,mBAKZ1D,MAAMuF,MAAN,CAAa,EAAE1C,KAAKT,OAAP,EAAb,CALY;;AAAA;AAAA;AAAA,mBAMEnC,MAAMkE,OAAN,CAAc,EAAEtB,KAAKV,OAAP,EAAd,CANF;;AAAA;AAMZiC,iBANY;;AAOlBA,kBAAMc,OAAN,GAAgBnF,EAAEyF,MAAF,CAASpB,MAAMc,OAAf,EAAwB;AAAA,qBAAO,CAACrC,IAAI2B,MAAJ,CAAWpC,OAAX,CAAR;AAAA,aAAxB,CAAhB;AAPkB;AAAA,mBAQZgC,MAAMgB,IAAN,EARY;;AAAA;;AAUlBjC,gBAAIG,IAAJ,CAAS;AACPE,sBAAQ,SADD;AAEPiB,sBAAQ;AAFD,aAAT;AAVkB;AAAA;;AAAA;AAAA;AAAA;;AAelBX;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAmBAd,QAAQyC,aAAR;AAAA,wDAAwB,kBAAOvC,GAAP,EAAYC,GAAZ,EAAiBW,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB3B,mBADgB,GACNe,IAAIE,MAAJ,CAAWC,QADL;AAAA;AAAA;AAAA,mBAIdrD,MAAMuF,MAAN,CAAa,EAAE3C,UAAUT,OAAZ,EAAb,CAJc;;AAAA;AAAA;AAAA,mBAKAlC,MAAMkE,OAAN,CAAc,EAAEtB,KAAKV,OAAP,EAAd,CALA;;AAAA;AAKdiC,iBALc;;AAMpBA,kBAAMc,OAAN,GAAgB,EAAhB;AANoB;AAAA,mBAOdd,MAAMgB,IAAN,EAPc;;AAAA;;AASpBjC,gBAAIG,IAAJ,CAAS;AACPE,sBAAQ,SADD;AAEPiB,sBAAQ,yCAFD;AAGPL;AAHO,aAAT;AAToB;AAAA;;AAAA;AAAA;AAAA;;AAepBN;;AAfoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA","file":"entry.js","sourcesContent":["const mongoose = require('mongoose');\nconst _ = require('lodash');\n\nconst Entry = require('../../models/Entry');\nconst Space = require('../../models/Space');\nconst helper = require('./helper');\n\nconst mongooseObject = mongoose.Types.ObjectId;\n\n/**\n * Entries\n */\n/* eslint-disable guard-for-in, no-restricted-syntax */\nconst checkObjectId = (data) => {\n  if (typeof (data) !== 'object') {\n    if (!mongooseObject.isValid(data)) throw new Error('Not objectID!!');\n  } else {\n    for (const keyData in data) {\n      if (!mongooseObject.isValid(data[keyData])) throw new Error('Not objectID!!');\n    }\n  }\n  return true;\n};\n\nconst getQuery = (q) => {\n  const queryString = {\n    content_type: 'contentTypeId',\n    eq: '$eq',\n    ne: '$ne',\n    gt: '$gt',\n    gte: '$gte',\n    lt: '$lt',\n    lte: '$lte',\n    in: '$in',\n    nin: '$nin',\n  };\n  const isObjectId = ['_id', 'contentTypeId', '_spaceId'];\n\n  const _q = {};\n  for (const key in q) {\n    const keyQuery = queryString[key] ? queryString[key] : key;\n    if (typeof (q[key]) === 'object') {\n      for (const __key in q[key]) {\n        if (queryString[__key]) {\n          if (typeof (_q[keyQuery]) !== 'object') {\n            _q[keyQuery] = {};\n          }\n          const tempVal = (__key === 'in' || __key === 'nin') ? q[key][__key].split(',') : q[key][__key];\n          _q[keyQuery][queryString[__key]] = tempVal;\n        }\n      }\n    } else {\n      _q[keyQuery] = {\n        $eq: q[key],\n      };\n    }\n    if (isObjectId.indexOf(keyQuery) >= 0) {\n      for (const tempIndex in _q[keyQuery]) {\n        checkObjectId(_q[keyQuery][tempIndex]);\n      }\n    }\n  }\n\n  return _q;\n};\n\nconst getEntry = async (query, spaceId, entryId = null) => {\n  const reqQuery = { ...query };\n  let select = '';\n  let skip = 0;\n  let limit = 0;\n\n  if (reqQuery.select) {\n    select = reqQuery.select;\n    delete reqQuery.select;\n  }\n  if (reqQuery.skip) {\n    skip = parseInt(reqQuery.skip, 10);\n    delete reqQuery.skip;\n  }\n  if (reqQuery.limit) {\n    limit = parseInt(reqQuery.limit, 10);\n    delete reqQuery.limit;\n  }\n\n  const _getQuery = getQuery(reqQuery);\n\n  checkObjectId(spaceId);\n\n  const _query = {\n    ..._getQuery,\n    _spaceId: { $eq: spaceId },\n  };\n  if (entryId !== null) {\n    checkObjectId(entryId);\n    _query._id = { $eq: entryId };\n  }\n\n  const result = await Entry.find(_query).select(select).limit(limit).skip(skip);\n  return result;\n};\n/* eslint-enable guard-for-in, no-restricted-syntax */\n\nexports.getAllEntries = async (req, res) => {\n  try {\n    const spaceId = req.params.space_id;\n    const reqQuery = req.query;\n    const result = await getEntry(reqQuery, spaceId);\n    res.json({\n      items: result,\n    });\n  } catch (e) {\n    res.status(500).json(e);\n  }\n};\n\nexports.getSingleEntry = async (req, res) => {\n  try {\n    const spaceId = req.params.space_id;\n    const entryId = req.params.entry_id;\n    const reqQuery = req.query;\n    const result = await getEntry(reqQuery, spaceId, entryId);\n    res.json({\n      item: (result.length > 0) ? result[0] : [],\n    });\n  } catch (e) {\n    res.status(500).json(e);\n  }\n};\n\n// UPDATE CONTENT TYPE\nconst updateEntry = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const entryId = req.params.entry_id;\n  const contentTypeId = req.headers['x-cic-content-type'];\n  const fields = req.body.fields;\n  const status = req.body.status;\n\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    const contentTypeInfo = _.find(space.contentTypes, ct => ct._id.equals(contentTypeId));\n    if (!contentTypeInfo) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        detail: `Invalid contentType ${contentTypeId}`,\n      });\n      return;\n    }\n\n    const validation = helper.validateFields(fields, contentTypeInfo);\n    if (!validation.valid) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        message: validation.message,\n      });\n      return;\n    }\n\n    const entry = await Entry.findOneAndUpdate({ _id: entryId }, {\n      contentTypeId,\n      fields,\n      status: status || 'draft',\n      _spaceId: spaceId,\n    }, {\n      new: true,\n      upsert: true,\n    });\n\n    // Add to space.entires if not exists\n    space.entries = _.uniq([...space.entries, entry._id]);\n    await space.save();\n\n    res.json({\n      status: 'SUCCESS',\n      detail: 'Create new entry successfully',\n      entry,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.updateEntry = updateEntry;\n\n// CREATE CONTENT TYPE\nexports.createEntry = (req, res, next) => {\n  // Create new objectId\n  const entryId = mongoose.Types.ObjectId();\n  req.params.entry_id = entryId;\n  return updateEntry(req, res, next);\n};\n\nexports.deleteEntry = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const entryId = req.params.entry_id;\n\n  try {\n    await Entry.remove({ _id: entryId });\n    const space = await Space.findOne({ _id: spaceId });\n    space.entries = _.filter(space.entries, _id => !_id.equals(entryId));\n    await space.save();\n\n    res.json({\n      status: 'SUCCESS',\n      detail: 'delete entry successfully',\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.truncateEntry = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n\n  try {\n    await Entry.remove({ _spaceId: spaceId });\n    const space = await Space.findOne({ _id: spaceId });\n    space.entries = [];\n    await space.save();\n\n    res.json({\n      status: 'SUCCESS',\n      detail: 'clear all entries in space successfully',\n      space,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n"]}