{"version":3,"sources":["../../../../server/app/controllers/space/contentType.js"],"names":["mongoose","require","_","Space","exports","getAllContentTypes","req","res","next","spaceId","params","space_id","findOne","_id","err","theSpace","json","types","contentTypes","getSingleContentType","contentTypeId","content_type_id","space","contentType","find","ct","equals","type","updateContentType","name","body","displayField","identifier","fields","contentTypeToUpdate","map","fld","Types","ObjectId","dateUpdated","Date","now","index","findIndex","push","save","status","detail","sys","id","updatedAt","createContentType","deleteContentType","filter","message"],"mappings":"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","file":"contentType.js","sourcesContent":["const mongoose = require('mongoose');\nconst _ = require('lodash');\n\nconst Space = require('../../models/Space');\n\n/**\n * Content Types\n */\nexports.getAllContentTypes = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, theSpace) => {\n    if (err) next(err);\n    res.json({\n      types: theSpace.contentTypes,\n    });\n  });\n};\n\nexports.getSingleContentType = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) next(err);\n\n    const contentType = _.find(space.contentTypes, ct => ct._id.equals(contentTypeId));\n    if (contentType) {\n      res.json({\n        type: contentType,\n      });\n    }\n  });\n};\n\n// UPDATE CONTENT TYPE\nconst updateContentType = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n  const name = req.body.name;\n  const displayField = req.body.displayField;\n  const identifier = req.body.identifier;\n  const fields = req.body.fields;\n\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n\n    const contentTypeToUpdate = {\n      _id: contentTypeId,\n      name,\n      identifier,\n      displayField,\n      fields: _.map(fields, (fld) => {\n        if (fld._id === '') return { ...fld, _id: mongoose.Types.ObjectId() };\n        return fld;\n      }),\n      dateUpdated: Date.now(),\n    };\n\n    const index = _.findIndex(space.contentTypes, ct => ct._id.equals(contentTypeId));\n\n    if (index > -1) {\n      // Existing\n      space.contentTypes[index] = contentTypeToUpdate;\n    } else {\n      // New\n      space.contentTypes.push(contentTypeToUpdate);\n    }\n\n    await space.save();\n\n    res.json({\n      status: 'SUCCESS',\n      detail: 'update content type successfully',\n      sys: {\n        type: 'ContentType',\n        id: contentTypeId,\n        updatedAt: Date.now(),\n      },\n      space,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.updateContentType = updateContentType;\n\n// CREATE CONTENT TYPE\nexports.createContentType = (req, res, next) => {\n  // Create new objectId\n  const contentTypeId = mongoose.Types.ObjectId();\n  req.params.content_type_id = contentTypeId;\n  return updateContentType(req, res, next);\n};\n\n\n// DELETE CONTENT TYPE\nexports.deleteContentType = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    space.contentTypes = _.filter(space.contentTypes, ct => !ct._id.equals(contentTypeId));\n    await space.save();\n\n    res.json({\n      status: 'SUCCESSFUL',\n      message: 'Delete contentType successfully',\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n"]}