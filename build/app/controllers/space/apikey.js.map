{"version":3,"sources":["../../../../server/app/controllers/space/apikey.js"],"names":["cuid","require","mongoose","Space","exports","getAllKey","req","res","next","spaceId","params","space_id","findOne","_id","space","json","title","items","apiKeys","clearAllKey","save","status","updateKey","keyId","key_id","name","body","isExisting","find","k","equals","map","apiKey","createKey","objectId","Types","ObjectId","deliveryKey","previewKey","expireDate","expire_date","err","key","push","err2","item","deleteKey","filter","message"],"mappings":"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","file":"apikey.js","sourcesContent":["import _ from 'lodash';\n\nconst cuid = require('cuid');\nconst mongoose = require('mongoose');\nconst Space = require('../../models/Space');\n\nexports.getAllKey = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    res.json({\n      title: 'Keys',\n      items: space.apiKeys,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.clearAllKey = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  try {\n    const space = Space.findOne({ _id: spaceId });\n    space.apiKeys = [];\n    await space.save();\n    res.json({\n      status: 'SUCCESSFUL',\n      title: 'Cleared key',\n      space,\n    });\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.updateKey = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const keyId = req.params.key_id;\n  const { name } = req.body;\n\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    const isExisting = _.find(space.apiKeys, k => k._id.equals(keyId));\n\n    if (isExisting) {\n      // TODO:\n      // Update existing noe\n      space.apiKeys = _.map(space.apiKeys, (apiKey) => {\n        if (apiKey._id.equals(keyId)) {\n          return {\n            _id: apiKey._id,\n            name,\n          };\n        }\n        return apiKey;\n      });\n\n      await space.save();\n      res.json({\n        title: 'Updated key',\n        space,\n      });\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n\nexports.createKey = (req, res, next) => {\n  const spaceId = req.params.space_id;\n\n  const { name } = req.body;\n  const objectId = mongoose.Types.ObjectId();\n  const deliveryKey = cuid();\n  const previewKey = cuid();\n  const expireDate = req.body.expire_date;\n\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) next(err);\n\n    const key = {\n      _id: objectId,\n      name: name || space.name,\n      deliveryKey,\n      previewKey,\n      expireDate,\n    };\n\n    space.apiKeys.push(key);\n\n    space.save((err2) => {\n      if (err2) next(err2);\n      res.json({\n        title: 'Added key',\n        item: key,\n        space,\n      });\n    });\n  });\n};\n\n\n// DELETE KEY\nexports.deleteKey = async (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const keyId = req.params.key_id;\n  try {\n    const space = await Space.findOne({ _id: spaceId });\n    if (space) {\n      space.apiKeys = _.filter(space.apiKeys, apiKey => !apiKey._id.equals(keyId));\n      await space.save();\n\n      res.json({\n        status: 'SUCCESSFUL',\n        message: 'Delete apiKey successfully',\n      });\n    }\n  } catch (e) {\n    next(e);\n  }\n};\n"]}