{"version":3,"sources":["../../../server/test/controllers/apikey.test.js"],"names":["process","env","NODE_ENV","jwt","require","Space","Entry","chai","chaiHttp","server","should","expect","token","sign","foo","use","describe","beforeEach","done","remove","err","it","request","post","set","send","name","end","res","spaceId","body","space","_id","have","status","item","be","an","property","eql","a","apiKeys","to","lengthOf"],"mappings":";;AAAA;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,MAAvB;;AAEA,IAAMC,MAAMC,QAAQ,cAAR,CAAZ;AACA,IAAMC,QAAQD,QAAQ,wBAAR,CAAd;AACA,IAAME,QAAQF,QAAQ,wBAAR,CAAd;;AAEA;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,WAAWJ,QAAQ,WAAR,CAAjB;AACA,IAAMK,SAASL,QAAQ,WAAR,CAAf;;AAEA,IAAMM,SAASH,KAAKG,MAAL,EAAf;AACA,IAAMC,SAASJ,KAAKI,MAApB;AACA,IAAMC,QAAQT,IAAIU,IAAJ,CAAS,EAAEC,KAAK,KAAP,EAAT,EAAyB,SAAzB,CAAd;;AAEAP,KAAKQ,GAAL,CAASP,QAAT;AACA;AACAQ,SAAS,SAAT,EAAoB,YAAM;AACxBC,aAAW,UAACC,IAAD,EAAU;AACnB;AACAb,UAAMc,MAAN,CAAa,EAAb,EAAiB,UAACC,GAAD,EAAS;AACxBF;AACD,KAFD;AAGD,GALD;;AAOA;;;AAGAF,WAAS,cAAT,EAAyB,YAAM;AAC7BK,OAAG,kCAAH,EAAuC,UAACH,IAAD,EAAU;;AAE/C;AACAX,WAAKe,OAAL,CAAab,MAAb,EACGc,IADH,CACQ,aADR,EAEGC,GAFH,CAEO,eAFP,cAEkCZ,KAFlC,EAGGa,IAHH,CAGQ;AACJC,cAAM;AADF,OAHR,EAMGC,GANH,CAMO,UAACP,GAAD,EAAMQ,GAAN,EAAc;AACjB,YAAMC,UAAUD,IAAIE,IAAJ,CAASC,KAAT,CAAeC,GAA/B;;AAEAzB,aAAKe,OAAL,CAAab,MAAb,EACGc,IADH,iBACsBM,OADtB,gBAEGL,GAFH,CAEO,eAFP,cAEkCZ,KAFlC,EAGGa,IAHH,CAGQ;AACJC,gBAAM;AADF,SAHR,EAMGC,GANH,CAMO,UAACP,GAAD,EAAMQ,GAAN,EAAc;AACjBA,cAAIlB,MAAJ,CAAWuB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAN,cAAIE,IAAJ,CAASK,IAAT,CAAczB,MAAd,CAAqB0B,EAArB,CAAwBC,EAAxB,CAA2B,QAA3B;AACAT,cAAIE,IAAJ,CAASK,IAAT,CAAczB,MAAd,CAAqBuB,IAArB,CAA0BK,QAA1B,CAAmC,MAAnC,EAA2CC,GAA3C,CAA+C,UAA/C;AACAX,cAAIE,IAAJ,CAASK,IAAT,CAAczB,MAAd,CAAqBuB,IAArB,CAA0BK,QAA1B,CAAmC,aAAnC,EAAkDF,EAAlD,CAAqDI,CAArD,CAAuD,QAAvD;AACAZ,cAAIE,IAAJ,CAASK,IAAT,CAAczB,MAAd,CAAqBuB,IAArB,CAA0BK,QAA1B,CAAmC,YAAnC,EAAiDF,EAAjD,CAAoDI,CAApD,CAAsD,QAAtD;;AAEAZ,cAAIE,IAAJ,CAASC,KAAT,CAAerB,MAAf,CAAsB0B,EAAtB,CAAyBC,EAAzB,CAA4B,QAA5B;AACAT,cAAIE,IAAJ,CAASC,KAAT,CAAerB,MAAf,CAAsBuB,IAAtB,CAA2BK,QAA3B,CAAoC,SAApC,EAA+CF,EAA/C,CAAkDI,CAAlD,CAAoD,OAApD;AACA7B,iBAAOiB,IAAIE,IAAJ,CAASC,KAAT,CAAeU,OAAtB,EAA+BC,EAA/B,CAAkCT,IAAlC,CAAuCU,QAAvC,CAAgD,CAAhD;AACAzB;AACD,SAjBH;AAkBD,OA3BH;AA6BD,KAhCD;AAiCD,GAlCD;AAoCD,CA/CD","file":"apikey.test.js","sourcesContent":["/* eslint-disable */\nprocess.env.NODE_ENV = 'test';\n\nconst jwt = require('jsonwebtoken');\nconst Space = require('../../app/models/Space');\nconst Entry = require('../../app/models/Entry');\n\n// Require the dev-dependencies\nconst chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst server = require('../../app');\n\nconst should = chai.should();\nconst expect = chai.expect;\nconst token = jwt.sign({ foo: 'bar' }, 'testing');\n\nchai.use(chaiHttp);\n// Our parent block\ndescribe('API Key', () => {\n  beforeEach((done) => {\n    // Before each test we empty the database\n    Space.remove({}, (err) => {\n      done();\n    });\n  });\n\n  /*\n   * Test the /POST apikey\n   */\n  describe('/POST apikey', () => {\n    it('it should return created api key', (done) => {\n\n      // Create space\n      chai.request(server)\n        .post('/v1/spaces/')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          name: 'Test Space'\n        })\n        .end((err, res) => {\n          const spaceId = res.body.space._id;\n\n          chai.request(server)\n            .post(`/v1/spaces/${spaceId}/api_keys`)\n            .set('Authorization', `Bearer ${token}`)\n            .send({\n              name: 'Test Key'\n            })\n            .end((err, res) => {\n              res.should.have.status(200);\n              res.body.item.should.be.an('object');\n              res.body.item.should.have.property('name').eql('Test Key');\n              res.body.item.should.have.property('deliveryKey').be.a('String');\n              res.body.item.should.have.property('previewKey').be.a('String');\n\n              res.body.space.should.be.an('object');\n              res.body.space.should.have.property('apiKeys').be.a('Array');\n              expect(res.body.space.apiKeys).to.have.lengthOf(1);\n              done();\n            });\n        });\n\n    });\n  });\n\n});\n"]}