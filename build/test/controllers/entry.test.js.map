{"version":3,"sources":["../../../server/test/controllers/entry.test.js"],"names":["process","env","NODE_ENV","jwt","require","Space","Entry","chai","chaiHttp","server","should","token","sign","foo","use","describe","beforeEach","done","remove","err","it","request","post","set","send","name","end","res","spaceId","body","space","_id","fields","identifier","required","localized","type","contentTypeId","sys","id","title","have","status","entry","be","an","property","eql","entryId","updateFields","put"],"mappings":"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","file":"entry.test.js","sourcesContent":["/* eslint-disable */\nprocess.env.NODE_ENV = 'test';\n\nconst jwt = require('jsonwebtoken');\nconst Space = require('../../app/models/Space');\nconst Entry = require('../../app/models/Entry');\n\n// Require the dev-dependencies\nconst chai = require('chai');\nconst chaiHttp = require('chai-http');\nconst server = require('../../app');\n\nconst should = chai.should();\nconst token = jwt.sign({ foo: 'bar' }, 'testing');\n\nchai.use(chaiHttp);\n// Our parent block\ndescribe('Entry', () => {\n  beforeEach((done) => {\n    // Before each test we empty the database\n    Space.remove({}, (err) => {\n      done();\n    });\n  });\n\n  /*\n   * Test the /POST entry\n   */\n  describe('/POST entry', () => {\n    it('it should return created entry', (done) => {\n\n      // Create space\n      chai.request(server)\n        .post('/v1/spaces/')\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          name: 'Test Space'\n        })\n        .end((err, res) => {\n          const spaceId = res.body.space._id;\n          // Create ContentType\n          chai.request(server)\n          .post('/v1/spaces/'+spaceId+'/content_types')\n          .set('Authorization', `Bearer ${token}`)\n          .send({\n            name: 'Article',\n            fields: [{\n              identifier: 'title',\n              name: 'Title',\n              required: 1,\n              localized: 1,\n              type: 'Text'\n            },\n            {\n              identifier: 'body',\n              name: 'Body',\n              required: 1,\n              localized: 1,\n              type: 'Text'\n            }]\n          })\n          .end((err, res) => {\n            const contentTypeId = res.body.sys.id;\n            const fields = {\n              title: \"Hello Entry\",\n              body: \"lorem ipsum bla bla bla\"\n            };\n            // Create Entry\n            chai.request(server)\n              .post('/v1/spaces/' + spaceId + '/entries')\n              .set('Authorization', `Bearer ${token}`)\n              .set('x-cic-content-type', contentTypeId)\n              .send({\n                fields,\n              })\n              .end((err, res) => {\n                res.should.have.status(200);\n                res.body.entry.should.be.an('object');\n                res.body.entry.should.have.property('fields').eql(fields);\n\n                const entryId = res.body.entry._id;\n                const updateFields = {\n                  title: 'Hello Update Entry',\n                  body: 'Update Body',\n                };\n\n                // Update Entry\n                chai.request(server)\n                  .put('/v1/spaces/' + spaceId + '/entries/' + entryId)\n                  .set('Authorization', `Bearer ${token}`)\n                  .set('x-cic-content-type', contentTypeId)\n                  .send({\n                    fields: updateFields\n                  })\n                  .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.entry.should.be.an('object');\n                    res.body.entry.should.have.property('fields').eql(updateFields);\n                    done();\n                  });\n              });\n\n          });\n        });\n    });\n  });\n\n\n});\n"]}