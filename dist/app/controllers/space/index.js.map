{"version":3,"sources":["../../../../server/app/controllers/space/index.js"],"names":["mongoose","require","_","Space","User","Organization","getUserFromIdentity","identity","findByIdentity","user","newUser","email","split","provider","providerId","identities","user_id","connection","isSocial","save","result","console","log","getOrganizationsFromUser","_id","organizations","isEmpty","newOrganization","name","users","Owners","push","exports","getAll","req","res","next","userOpenId","find","$or","userOrgazation","organization","$in","map","json","items","getSingle","spaceId","params","space_id","findOne","exec","err","space","title","updateSpace","createSpace","spaceName","body","defaultLocale","organizationToUse","spaces","status","detail","deleteSpace","message","remove"],"mappings":"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","file":"index.js","sourcesContent":["const mongoose = require('mongoose');\nconst _ = require('lodash');\nimport { getAccessToken, decodeToken, getIdentityFromToken } from '../../utils/jwtUtils';\nconst Space = require('../../models/Space');\nconst User = require('../../models/User');\nconst Organization = require('../../models/Organization');\n\n\n/**\n * Get\n */\nexport const getUserFromIdentity = async (identity) => {\n  try {\n    const user = await User.findByIdentity(identity);\n    if (user) return user;\n\n    // Else create new one\n    const newUser = new User();\n    newUser.email = '';\n    const [provider, providerId] = _.split(identity, '|');\n    newUser.identities = [\n      {\n        provider,\n        user_id: providerId,\n        connection: provider,\n        isSocial: true\n      }\n    ];\n    const result = await newUser.save();\n    return newUser;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nconst getOrganizationsFromUser = async (user) => {\n  try{\n\n    const organizations = await Organization.findByIdentity(user._id);\n    console.log('check organizations', organizations);\n    if (!_.isEmpty(organizations)) return organizations;\n\n    // Else create new one\n    const newOrganization = new Organization();\n    newOrganization.name = 'Default';\n    newOrganization.users.Owners = [user._id];\n\n    user.organizations.push(newOrganization._id);\n    await user.save();\n    await newOrganization.save();\n    return [newOrganization];\n\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// exports.getAll = (req, res, next) => {\n//\n//   const userOpenId = getUserFromToken(req);\n//   User.findByIdentity(userOpenId, (err, user) => {\n//     console.log('userOpenId', userOpenId, user);\n//   });\n//\n//   Space.find({}, (err, spaces) => {\n//     if (err) { return next(err); }\n//     res.json({\n//       items: spaces,\n//     });\n//   });\n// };\n\nexports.getAll = async (req, res, next) => {\n\n  const userOpenId = getIdentityFromToken(req);\n  const user = await getUserFromIdentity(userOpenId);\n\n  console.log(\"userId:: \", user._id);\n\n  try {\n    // const result = await Space.find({ users: user._id });\n\n    const userOrgazation = await Organization.find({$or: [{'users.Members':user._id},{'users.Owners':user._id}] });\n\n    const result = await Space.find({\n          organization: { $in: _.map(userOrgazation, '_id') }\n       });\n\n    res.json({\n      items: result\n    });\n  } catch (e) {\n    next(e);\n  }\n}\n\nexports.getSingle = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }).exec((err, space) => {\n    if (err) { return next(err); }\n    res.json({\n      title: 'find space',\n      space,\n    });\n  });\n}\n\nexports.updateSpace = (req, res, next) => {\n\n}\n\nexports.createSpace = async (req, res, next) => {\n  const spaceName = req.body.name;\n  const defaultLocale = req.body.defaultLocale;\n\n  const userOpenId = getIdentityFromToken(req);\n  const user = await getUserFromIdentity(userOpenId);\n  console.log(\"userOpenId:: \", userOpenId);\n  console.log(\"user createSpace:: \", user);\n\n  const organizations = await getOrganizationsFromUser(user);\n  console.log(\"organization:: \", organizations);\n\n  const organizationToUse = organizations[0];\n\n  const space = new Space({\n    name: spaceName,\n    defaultLocale,\n    users: [user._id],\n    organization: organizationToUse._id\n  });\n\n  organizationToUse.spaces.push(space._id);\n\n  await space.save();\n  await organizationToUse.save();\n\n  // space.save((err) => {\n  //   if (err) { return next(err); }\n    res.json({\n      status: 'SUCCESS',\n      detail: 'Create space successfully',\n      space: space,\n      user: user,\n      organization: organizationToUse,\n    });\n  // });\n};\n/*exports.createSpace = async (req, res, next) => {\n  const spaceName = req.body.name;\n  const defaultLocale = req.body.defaultLocale;\n  // const organization_id = req.body.organization_id;\n\n  const userOpenId = getIdentityFromToken(req);\n  const user = await getUserFromIdentity(userOpenId);\n\n  const organization2 = await getOrganizationFromIdentity(userOpenId);\n\n  console.log(\"user:: \", user);\n  console.log(\"organization:: \", organization2);\n\n  const space = new Space({\n    name: spaceName,\n    defaultLocale,\n    users: [user._id],\n    //organization: organization_id\n  });\n\n  const organization = new Organization();\n  organization.spaces = [space._id];\n\n  // await space.save();\n  // await user.save();\n\n  // space.save((err) => {\n  //   if (err) { return next(err); }\n  //   res.json({\n  //     status: 'SUCCESS',\n  //     detail: 'Create space successfully',\n  //     space: space,\n  //   });\n  // });\n};*/\n\nexports.deleteSpace = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    if (!space) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        message: 'Cannot find space',\n      });\n    } else {\n      space.remove();\n      res.json({\n        status: 'SUCCESSFUL',\n        message: 'Delete successfully',\n      });\n    }\n  });\n};\n"]}