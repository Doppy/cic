{"version":3,"sources":["../../../../server/app/controllers/space/index-old.js"],"names":["Space","require","mongoose","_","exports","getAll","req","res","find","err","theSpaces","json","title","items","getSingle","next","spaceId","params","space_id","accessToken","query","access_token","findOne","_id","space","console","log","apiKeys","isContentDelivery","some","keyItem","deliveryKey","isContentPreview","previewKey","status","createSpace","spaceName","body","name","defaultLocale","save","detail","deleteSpace","message","remove","getAllContentTypes","theSpace","types","contentTypes","getSingleContentType","updateContentType","contentTypeId","content_type_id","fields","isExisting","ct","equals","map","contentType","id","field","fieldType","type","required","localized","validations","push","dateUpdated","Date","now","createContentType","Types","ObjectId","deleteContentType","filter"],"mappings":"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","file":"index-old.js","sourcesContent":["const Space = require('../../models/Space');\nconst mongoose = require('mongoose');\nconst _ = require('lodash');\n\nexports.getAll = (req, res) => {\n\n  Space.find({ }, (err, theSpaces) => {\n    res.json({\n      title: 'Spaces',\n      items: theSpaces,\n    });\n  });\n};\n\nconst getSingle = (req, res, next) => {\n\n\n  const spaceId = req.params.space_id;\n  const accessToken = req.query.access_token;\n\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { console.log(err); return next(err); }\n\n    const apiKeys = space.apiKeys;\n\n    // Check Key\n    const isContentDelivery = _.some(apiKeys, keyItem => keyItem.deliveryKey === accessToken);\n    const isContentPreview = _.some(apiKeys, keyItem => keyItem.previewKey === accessToken);\n\n    if (isContentDelivery) {\n      // Content Delivery\n      res.json({\n        title: 'find space',\n        space,\n      });\n    } else if (isContentPreview) {\n      // Content Preview\n      res.json({\n        title: 'find space',\n        space,\n      });\n    } else {\n      // Invalid key\n      res.json({\n        status: 'UNSUCESSFUL',\n        title: 'Invalid key space',\n      });\n    }\n  });\n};\n\nexports.getSingle = getSingle;\n\nexports.createSpace = (req, res, next) => {\n  const spaceName = req.body.name;\n  const defaultLocale = req.body.defaultLocale;\n\n  const space = new Space({\n    name: spaceName,\n    defaultLocale,\n  });\n\n  space.save((err) => {\n    if (err) { return next(err); }\n    res.json({\n      status: 'SUCCESS',\n      detail: 'Create space successfully',\n    });\n  });\n};\n\nexports.deleteSpace = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    if (!space) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        message: 'Cannot find space',\n      });\n    } else {\n      space.remove();\n      res.json({\n        status: 'SUCCESSFUL',\n        message: 'Delete successfully',\n      });\n    }\n  });\n};\n\n/**\n * Content Types\n */\nexports.getAllContentTypes = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, theSpace) => {\n    if (err) { return next(err); }\n    res.json({\n      types: theSpace.contentTypes,\n    });\n  });\n};\n\nexports.getSingleContentType = (req, res) => {\n\n};\n\n// UPDATE CONTENT TYPE\nconst updateContentType = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n  const name = req.body.name;\n  const fields = req.body.fields;\n\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    const isExisting = _.find(space.contentTypes, ct => ct._id.equals(contentTypeId));\n\n    if (isExisting) {\n      // Update existing noe\n      space.contentTypes = _.map(space.contentTypes, (contentType) => {\n\n        if (contentType._id.equals(contentTypeId)) {\n          return {\n            _id: contentType._id,\n            name,\n            fields: _.map(fields, field => ({\n              id: field.id,\n              name: field.name,\n              fieldType: field.type,\n              required: field.required,\n              localized: field.localized,\n              validations: field.validations,\n            })),\n          };\n        }\n        return contentType;\n      });\n    } else {\n      // Add New\n      space.contentTypes.push({\n        _id: contentTypeId,\n        name,\n        fields: _.map(fields, field => ({\n          id: field.id,\n          name: field.name,\n          fieldType: field.type,\n          required: field.required,\n          localized: field.localized,\n          validations: field.validations,\n        })),\n      });\n    }\n\n    space.dateUpdated = Date.now();\n\n    space.save((err) => {\n      if (err) { console.log(err); return next(err); }\n      res.json({\n        status: 'SUCCESS',\n        detail: 'update content type successfully',\n        space,\n      });\n    });\n  });\n};\n\nexports.updateContentType = updateContentType;\n\n// CREATE CONTENT TYPE\nexports.createContentType = (req, res, next) => {\n\n  // Create new objectId\n  const contentTypeId = mongoose.Types.ObjectId();\n  req.params.content_type_id = contentTypeId;\n  return updateContentType(req, res, next);\n};\n\n\n// DELETE CONTENT TYPE\nexports.deleteContentType = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    if (!space) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        message: 'Cannot find space',\n      });\n    } else {\n      const contentTypes = space.contentTypes;\n      space.contentTypes = _.filter(contentTypes, ct => !ct._id.equals(contentTypeId));\n\n      space.save((err) => {\n        if (err) { return next(err); }\n        res.json({\n          status: 'SUCCESSFUL',\n          message: 'Delete contentType successfully',\n        });\n      });\n    }\n  });\n};\n"]}