{"version":3,"sources":["../../../../server/app/controllers/space/contentType.js"],"names":["mongoose","require","_","Space","exports","getAllContentTypes","req","res","next","spaceId","params","space_id","findOne","_id","err","theSpace","json","types","contentTypes","getSingleContentType","contentTypeId","content_type_id","space","contentType","find","ct","equals","type","updateContentType","name","body","displayField","identifier","fields","isExisting","map","id","field","required","localized","validations","dateUpdated","Date","now","push","save","console","log","status","detail","createContentType","Types","ObjectId","deleteContentType","message","filter"],"mappings":"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","file":"contentType.js","sourcesContent":["const mongoose = require('mongoose');\nconst _ = require('lodash');\n\nconst Space = require('../../models/Space');\n\nexports.getAllContentTypes = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, theSpace) => {\n    if (err) { return next(err); }\n    res.json({\n      types: theSpace.contentTypes,\n    });\n  });\n};\n\nexports.getSingleContentType = (req, res, next) => {\n\n}\n\n/**\n * Content Types\n */\nexports.getAllContentTypes = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  Space.findOne({ _id: spaceId }, (err, theSpace) => {\n    if (err) { return next(err); }\n    res.json({\n      types: theSpace.contentTypes,\n    });\n  });\n};\n\nexports.getSingleContentType = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    const contentType = _.find(space.contentTypes, ct => ct._id.equals(contentTypeId));\n    if (contentType) {\n      res.json({\n        type: contentType,\n      });\n    }\n  });\n};\n\n// UPDATE CONTENT TYPE\nconst updateContentType = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n  const name = req.body.name;\n  const displayField = req.body.displayField;\n  const identifier = req.body.identifier;\n  const fields = req.body.fields;\n\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    const isExisting = _.find(space.contentTypes, ct => ct._id.equals(contentTypeId));\n\n    if (isExisting) {\n      // Update existing noe\n      space.contentTypes = _.map(space.contentTypes, (contentType) => {\n        if (contentType._id.equals(contentTypeId)) {\n          return {\n            _id: contentType._id,\n            name,\n            identifier,\n            displayField,\n            fields: _.map(fields, field => ({\n              id: field.id,\n              name: field.name,\n              identifier: field.identifier,\n              type: field.type,\n              required: field.required,\n              localized: field.localized,\n              validations: field.validations,\n            })),\n            dateUpdated: Date.now(),\n          };\n        }\n        return contentType;\n      });\n\n    } else {\n      // Add New\n      space.contentTypes.push({\n        _id: contentTypeId,\n        name,\n        identifier,\n        displayField,\n        fields: _.map(fields, field => ({\n          id: field.id,\n          name: field.name,\n          identifier: field.identifier,\n          type: field.type,\n          required: field.required,\n          localized: field.localized,\n          validations: field.validations,\n        })),\n        dateUpdated: Date.now(),\n      });\n    }\n\n\n    space.save((err) => {\n      if (err) { console.log(err); return next(err); }\n      res.json({\n        status: 'SUCCESS',\n        detail: 'update content type successfully',\n        space,\n      });\n    });\n  });\n};\n\nexports.updateContentType = updateContentType;\n\n// CREATE CONTENT TYPE\nexports.createContentType = (req, res, next) => {\n\n  // Create new objectId\n  const contentTypeId = mongoose.Types.ObjectId();\n  req.params.content_type_id = contentTypeId;\n  return updateContentType(req, res, next);\n};\n\n\n// DELETE CONTENT TYPE\nexports.deleteContentType = (req, res, next) => {\n  const spaceId = req.params.space_id;\n  const contentTypeId = req.params.content_type_id;\n\n  Space.findOne({ _id: spaceId }, (err, space) => {\n    if (err) { return next(err); }\n\n    if (!space) {\n      res.json({\n        status: 'UNSUCCESSFUL',\n        message: 'Cannot find space',\n      });\n    } else {\n      const contentTypes = space.contentTypes;\n      space.contentTypes = _.filter(contentTypes, ct => !ct._id.equals(contentTypeId));\n\n      space.save((err) => {\n        if (err) { return next(err); }\n        res.json({\n          status: 'SUCCESSFUL',\n          message: 'Delete contentType successfully',\n        });\n      });\n    }\n  });\n};\n"]}