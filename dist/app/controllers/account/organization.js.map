{"version":3,"sources":["../../../../server/app/controllers/account/organization.js"],"names":["mongoose","require","_","Organization","mongooseObject","Types","ObjectId","exports","getAll2","req","res","next","find","err","organizations","json","items","getAll","getSingle","organizationId","params","organization_id","findOne","_id","exec","organization","title","createOrganization","userOpenId","user","name","body","users","Owners","push","save","status","item","getAllMemberOrganization","isValid","console","log","populate","result","members","Members","delMemberOrganization","userId","user_id","update","$pull","createMemberOrganization","checkMember","isEmpty","$push"],"mappings":"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","file":"organization.js","sourcesContent":["import {getUserFromIdentity} from '../space/index';\nimport { getAccessToken, decodeToken, getIdentityFromToken } from '../../utils/jwtUtils';\nconst mongoose = require('mongoose');\n\nconst _ = require('lodash');\nconst Organization = require('../../models/Organization');\nconst mongooseObject = mongoose.Types.ObjectId;\n\n\nexports.getAll2 = function (req, res, next) {\n\n  Organization.find({ }, function (err, organizations) {\n    res.json({\n      items: organizations\n    });\n  })\n}\n\n\nexports.getAll = async (req, res, next) => {\n\n  const organizations = await Organization.find({ });\n\n  res.json({\n    items: organizations\n  });\n}\n\nexports.getSingle = async (req, res, next) => {\n   const organizationId = req.params.organization_id;\n   Organization.findOne({ _id: organizationId }).exec((err, organization) => {\n     if (err) { return next(err); }\n     res.json({\n       title: 'find organization',\n       organization,\n     });\n   });\n}\n\n  /*\n  try {\n    const result = await Organization.find({ });\n    res.json({\n      items: result,\n    });\n  } catch (e) {\n    next(e);\n  }*/\n\n\n\nexports.createOrganization = async (req, res, next) => {\n\n  try {\n    const userOpenId = getIdentityFromToken(req);\n    const user = await getUserFromIdentity(userOpenId);\n\n    // console.log(\"user:: \", user);\n\n    const organization = new Organization();\n    organization.name = req.body.name;\n\n    organization.users.Owners = [user._id];\n\n    // console.log(\"organization:: \", organization);\n\n    user.organizations.push(organization._id);  // Add organizations to User\n\n    await organization.save();\n    await user.save();\n\n    res.json({\n      status: 'success',\n      item: organization,\n    });\n  } catch (e) {\n    next(e);\n  }\n}\n\nexports.getAllMemberOrganization = async (req, res, next) => {\n\n  const organizationId = req.params.organization_id;\n\n\n\n  try {\n    if(!mongooseObject.isValid(organizationId)){\n      console.log(\"iii\");\n      throw { 'message' : 'Not objectId'};\n    }\n    \n    // const result = await Organization.find({ _id: organizationId });\n    const result = await Organization.find({ _id: organizationId }).populate('users.Members');\n\n    console.log(\"result:: \", result);\n    res.json({\n      organization: organizationId,\n      members: result[0].users.Members\n      // members: result[0].users.Members\n    });\n  } catch (e) {\n    next(e);\n  }\n}\n\nexports.delMemberOrganization = async (req, res, next) => {\n\n  try {\n\n    const organizationId = req.params.organization_id;\n    const userId = req.params.user_id;\n\n    console.log(\"userId:: \", userId);\n    console.log(\"organizationId:: \", organizationId);\n\n    await Organization.update(\n      { _id: organizationId },\n      { $pull:\n        {\n          'users.Members': userId\n        }\n      }\n    );\n\n    res.json({\n      status: 'SUCCESS'\n    });\n\n  } catch (e) {\n    next(e);\n  }\n\n\n}\n\nexports.createMemberOrganization = async (req, res, next) => {\n  try {\n    const userId = req.body.user_id;\n    const organizationId = req.params.organization_id;\n\n    console.log(\"userId:: \", userId);\n    console.log(\"organizationId:: \", organizationId);\n\n    // const organization = await Organization.find({ _id: organizationId });\n    // console.log(\"find organization:: \", organization);\n    // organization[0].users.Members.push(userId);\n\n    // const organization = new Organization();\n    // organization.update( { \"_id\": organizationId },\n    // { \"users.Members\": userId },\n    // { upsert: true } )\n\n    // const organization = await Organization.findOne({ _id: organizationId });\n    // organization.users.Members.push(userId);\n    //\n    // const result = await organization.save();\n\n    const checkMember = await Organization.find({ \"users.Members\" : userId});\n\n    if(!_.isEmpty(checkMember)){\n      // console.log(\"IF\");\n      res.json({\n        status: 'มีแล้ว ไม่แอดแล้ว'\n      });\n    }else{\n      // console.log(\"ELSE\");\n      await Organization.update(\n        { \"_id\" : organizationId },\n        { $push:\n          {\n            \"users.Members\": userId\n          }\n        });\n\n        res.json({\n          status: 'SUCCESS'\n        });\n    }\n    console.log(\"checkMember::\", checkMember);\n\n\n\n    //   console.log('Hello');\n    // await organization.save();\n\n\n\n\n  } catch (e) {\n    next(e);\n  }\n}\n"]}