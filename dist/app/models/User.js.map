{"version":3,"sources":["../../../server/app/models/User.js"],"names":["bcrypt","require","crypto","mongoose","Schema","userSchema","email","type","String","spaces","Types","ObjectId","ref","organizations","profile","name","gender","location","website","picture","password","passwordResetToken","passwordResetExpires","Date","identities","provider","user_id","connection","isSocial","Boolean","default","facebook","twitter","google","github","instagram","linkedin","steam","tokens","Array","timestamps","pre","save","next","user","isModified","genSalt","err","salt","hash","getProvider","identity","head","split","statics","findByIdentity","cb","identityProvider","identityNumber","console","log","findOne","$elemMatch","methods","comparePassword","candidatePassword","compare","isMatch","gravatar","size","md5","createHash","update","digest","User","model","module","exports"],"mappings":"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","file":"User.js","sourcesContent":["import _ from 'lodash';\nconst bcrypt = require('bcrypt-nodejs');\nconst crypto = require('crypto');\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst userSchema = new mongoose.Schema({\n  email: { type: String },\n  spaces: [{ type: Schema.Types.ObjectId, ref: 'Space' }],\n  organizations : [{ type: Schema.Types.ObjectId, ref: 'Organization' }],\n  profile: {\n    name: String,\n    gender: String,\n    location: String,\n    website: String,\n    picture: String\n  },\n  password: String,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  identities: [\n    {\n      provider: String,\n      user_id: String,\n      connection: String,\n      isSocial: { type: Boolean, default: true },\n    }\n  ],\n  facebook: String,\n  twitter: String,\n  google: String,\n  github: String,\n  instagram: String,\n  linkedin: String,\n  steam: String,\n  tokens: Array,\n\n}, { timestamps: true });\n\n/**\n * Password hash middleware.\n */\nuserSchema.pre('save', function save(next) {\n  const user = this;\n  if (!user.isModified('password')) { return next(); }\n  bcrypt.genSalt(10, (err, salt) => {\n    if (err) { return next(err); }\n    bcrypt.hash(user.password, salt, null, (err, hash) => {\n      if (err) { return next(err); }\n      user.password = hash;\n      next();\n    });\n  });\n});\n\nexport const getProvider = (identity) => {\n  return _.head(_.split(identity, '|'));\n};\n\n\nuserSchema.statics.findByIdentity = function (identity, cb) {\n  // const identityProvider = getProvider(identity);\n  const [identityProvider, identityNumber] = _.split(identity, '|');\n\n  console.log(\"identityProvider:: \", identityProvider);\n\n  return this.findOne({\n    identities: {\n      $elemMatch: {\n        provider: identityProvider,\n        user_id: identityNumber,\n      }\n    }\n  }, cb);\n};\n\n/**\n * Helper method for validating user's password.\n */\nuserSchema.methods.comparePassword = function comparePassword(candidatePassword, cb) {\n  bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\n    cb(err, isMatch);\n  });\n};\n\n/**\n * Helper method for getting user's gravatar.\n */\nuserSchema.methods.gravatar = function gravatar(size) {\n  if (!size) {\n    size = 200;\n  }\n  if (!this.email) {\n    return `https://gravatar.com/avatar/?s=${size}&d=retro`;\n  }\n  const md5 = crypto.createHash('md5').update(this.email).digest('hex');\n  return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;\n};\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"]}